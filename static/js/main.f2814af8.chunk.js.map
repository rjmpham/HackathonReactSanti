{"version":3,"sources":["styles/Menu.module.css","Model/Vector2.js","Model/Floor.js","Model/Tile.js","Model/GameState.js","View/Square.js","View/Board.js","Model/ControlButtons.js","View/ControlPanel.js","Model/Worker.js","Controllers/Player.js","Controllers/GameController.js","View/Game.js","index.js","View/Menu.js","styles/ControlPanel.module.css"],"names":["module","exports","Vector2","x","y","this","vector2","FLOOR","GROUND","L_ONE","L_TWO","L_THREE","DOME","Tile","description","topLevel","capped","worker","isHighlighted","position","toString","console","log","getIndicator","GameState","boardSize","boardState","playerList","activePlayer","winner","selectedWorker","highlightedTiles","isInSetup","needsToSelectWorker","workerNeedsToMove","needsToBuild","error_message","Array","i","length","localNine","dx","dy","tx","ty","undefined","error","push","buildFloor","workerPosition","targetPosition","moveWorker","removeWorker","positions","forEach","tile","getTile","reset","Square","props","state","squareLevel","gameState","onClick","setState","workerIndicator","indicator","is_highlighted","className","handleClick","React","Component","Board","squareElement","createRef","viewGameState","current","updateSelf","ref","tileState","row_index","squareJSX","renderSquare","rowSJX","generateBoardRow","generateBoard","CONTROLBUTTONS","NEWGAME","PASS","ControlPannel","styles","menuButton","Worker","owner","gender","Player","workerID","playerName","workers","moveDistance","newWorker","equals","hasWorkerWon","workerTile","getLocalNine","filter","isBuildable","validPositions","validMoves","getAllValidWorkerMoves","moveValid","foundMatch","GameController","game","player_1","player_2","placeWorker","worker_position","local_nine","buildable_positions","selectedWorkerPosition","verifyMove","clickedTile","hasWorkerAtPosition","handleSetup","handleWorkerSelection","handleWorkerMovement","find_buildable_positions","highlightTiles","target","local9","builtBool","clearHighlightedTiles","newTurn","Game","winningJSX","errorJSX","controller","handleBoardClick","get_current_player","role","aria-label","errorJSK","style","color","document","location","reload","updateState","current_player","turn_phase","get_turn_phase","boardElement","ControlPanel","handleControlClick","ReactDOM","render","body","orange_text","purple_text","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,YAAc,4B,uLCD7EC,E,WACjB,WAAYC,EAAGC,GAAG,oBACdC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,E,mDAGNE,GACH,OAAQA,EAAQH,IAAME,KAAKF,GAAOG,EAAQF,IAAMC,KAAKD,I,iCAIrD,MAAO,IAAMC,KAAKF,EAAI,KAAOE,KAAKD,EAAI,Q,KCXjCG,EAAQ,CACjBC,OAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,QAAS,EACTC,KAAM,KCFWC,E,WAQjB,WAAYV,EAAEC,GAAG,yBAPjBU,YAAc,kBAOE,KANhBC,SAAWR,EAAMC,OAMD,KALhBQ,QAAS,EAKO,KAJhBC,OAAS,KAIO,KAFhBC,eAAgB,EAGZb,KAAKc,SAAW,IAAIjB,EAAQC,EAAEC,GAC9BC,KAAKS,aAAeT,KAAKc,SAASC,W,uDAG3BH,GACPZ,KAAKY,OAASA,EACdI,QAAQC,IAAI,iBAAmBjB,KAAKY,U,qCAIpCZ,KAAKY,OAAS,O,oCAKd,OAASZ,KAAKW,QAA4B,OAAhBX,KAAKY,S,mCAK3BZ,KAAKU,SAAS,IAAK,GACnBV,KAAKU,SAAWR,EAAMK,KACtBP,KAAKW,QAAS,GAEdX,KAAKU,UAAU,I,qCAKnB,OAAuB,OAAhBV,KAAKY,QAAmBZ,KAAKU,WAAaR,EAAMI,U,qCAIvD,OAAON,KAAKY,OAAOM,iB,8BAInBlB,KAAKU,SAAWR,EAAMC,OACtBH,KAAKW,QAAS,EACdX,KAAKY,OAAS,KACdZ,KAAKa,eAAgB,M,KCjDRM,E,WAgBjB,WAAYC,GAAW,yBAfvBC,WAAa,KAeS,KAdtBC,WAAa,GAcS,KAbtBC,aAAe,KAaO,KAZtBH,UAAY,EAYU,KAXtBI,OAAS,KAWa,KAVtBC,eAAiB,KAUK,KATtBC,iBAAmB,GASG,KAPtBC,WAAY,EAOU,KANtBC,qBAAsB,EAMA,KALtBC,mBAAoB,EAKE,KAJtBC,cAAe,EAIO,KAFtBC,cAAgB,KAGZ/B,KAAKqB,WAAa,IAAIW,MAAMZ,GAC5B,IAAK,IAAIa,EAAI,EAAGA,EAAIjC,KAAKqB,WAAWa,OAAQD,IACxCjC,KAAKqB,WAAWY,GAAK,IAAID,MAAMZ,GAGnC,IAAK,IAAItB,EAAI,EAAGA,EAAIE,KAAKqB,WAAW,GAAGa,OAAQpC,IAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIC,KAAKqB,WAAWvB,GAAGoC,OAAQnC,IAC3CC,KAAKqB,WAAWvB,GAAGC,GAAK,IAAIS,EAAKV,EAAGC,GAI5CC,KAAKoB,UAAYA,E,yDAKRN,GAET,IADA,IAAIqB,EAAY,GACPC,GAAM,EAAGA,GAAM,EAAGA,IACvB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAK,CAC5B,IAAIC,EAAKxB,EAAShB,EAAIsC,EAClBG,EAAKzB,EAASf,EAAIsC,EAClBC,GAAM,GAAKA,EAAKtC,KAAKoB,WACjBmB,GAAM,GAAKA,EAAKvC,KAAKoB,iBACYoB,KAA5BxC,KAAKqB,WAAWiB,GAAIC,GACrBvB,QAAQyB,MAAM,2CAGdN,EAAUO,KAAK1C,KAAKqB,WAAWiB,GAAIC,KAMvD,OAAOJ,I,8BAGHlC,GACJ,OAAOD,KAAKqB,WAAWpB,EAAQH,GAAGG,EAAQF,K,iCAGnCe,GACPd,KAAKqB,WAAWP,EAAShB,GAAGgB,EAASf,GAAG4C,e,iCAIjCC,EAAgBC,GACI,OAAxB7C,KAAKyB,gBAAyBT,QAAQyB,MAAM,gCAC/CzC,KAAKqB,WAAWwB,EAAe/C,GAAG+C,EAAe9C,GAAG+C,WAAW9C,KAAKyB,gBACpEzB,KAAKqB,WAAWuB,EAAe9C,GAAG8C,EAAe7C,GAAGgD,iB,qCAIpD,OAAuB,OAAhB/C,KAAKwB,S,qCAGDwB,GAAW,IAAD,OACM,OAAxBhD,KAAKyB,gBACJT,QAAQyB,MAAM,2BAEO,IAArBO,EAAUd,QACVc,EAAUC,QAAQ,SAAAC,GACd,EAAKC,QAAQD,EAAKpC,UAAUD,eAAgB,EAC5C,EAAKa,iBAAiBgB,KAAKQ,O,8CAKf,IAAD,OAEnBlD,KAAK0B,iBAAiBuB,QAAQ,SAAAC,GAC1B,EAAKC,QAAQD,EAAKpC,UAAUD,eAAgB,IAIhDb,KAAK0B,iBAAmB,K,8BAGpBZ,EAAUoC,GACdlD,KAAKqB,WAAWP,EAAShB,GAAGgB,EAASf,GAAKmD,I,8BAI1C,IAAI,IAAIpD,EAAI,EAAGA,EAAIE,KAAKqB,WAAW,GAAGa,OAAQpC,IAC1C,IAAI,IAAIC,EAAI,EAAGA,EAAIC,KAAKqB,WAAWvB,GAAGoC,OAAQnC,IAC1CC,KAAKqB,WAAWvB,GAAGC,GAAGqD,QAI9BpD,KAAKsB,WAAW2B,QAAQ,SAAAnD,GAAC,OAAIA,EAAEsD,UAC/BpD,KAAKwB,OAAS,O,qCAIdR,QAAQC,IAAI,mBACZ,IAAI,IAAInB,EAAI,EAAGA,EAAIE,KAAKoB,UAAWtB,IAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAIC,KAAKoB,UAAWrB,IAC/BiB,QAAQC,IAAIjB,KAAKqB,WAAWvB,GAAGC,GAAGe,SAAW,gBAAkBd,KAAKqB,WAAWvB,GAAGC,GAAGa,Y,KC/GhFyC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAS,CACVC,YAAa,UACbC,UAAW,EAAKH,MAAMG,WALX,E,2EAUfzD,KAAKsD,MAAMI,QAAQ1D,KAAKsD,MAAMxC,UAC9B,IAAIoC,EAAOlD,KAAKuD,MAAME,UAAUpC,WAAWrB,KAAKsD,MAAMxC,SAAShB,GAAGE,KAAKsD,MAAMxC,SAASf,GAEnFmD,EAAKxC,WAAWR,EAAMC,OACrBH,KAAK2D,SAAS,CACVH,YAAa,YAEXN,EAAKxC,WAAWR,EAAME,MAC5BJ,KAAK2D,SAAS,CACVH,YAAa,YAEXN,EAAKxC,WAAWR,EAAMG,MAC5BL,KAAK2D,SAAS,CACVH,YAAa,YAEXN,EAAKxC,WAAWR,EAAMI,QAC5BN,KAAK2D,SAAS,CACVH,YAAa,YAGjBxD,KAAK2D,SAAS,CACVH,YAAa,c,+BAMhB,IAAD,OACAN,EAAOlD,KAAKuD,MAAME,UAAUpC,WAAWrB,KAAKsD,MAAMxC,SAAShB,GAAGE,KAAKsD,MAAMxC,SAASf,GAClF6D,EAAkC,MAAfV,EAAKtC,OAAkB,GAAKsC,EAAKtC,OAAOiD,UAO/D,OANIX,EAAKY,gBACL9D,KAAK2D,SAAS,CACVH,YAAa,sBAKjB,4BAEIO,UAAW/D,KAAKuD,MAAMC,YACtBE,QAAS,kBAAM,EAAKM,gBAEpB,yBAAKD,UAAW,aACXH,Q,GAtDeK,IAAMC,WCArBC,E,YAEjB,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KACDc,cAAgBH,IAAMI,YAE3B,EAAKd,MAAO,CACRe,cAAe,EAAKhB,MAAMG,WALhB,E,4EAUdzD,KAAKoE,cAAcG,QAAQC,e,mCAIlBvC,GAAI,IAAD,OACZ,OACI,kBAAC,EAAD,CACIwC,IAAOzE,KAAKoE,cACZtD,SAAYmB,EACZyC,UAAW1E,KAAKuD,MAAMe,cAAcjD,WAAWY,EAAEnC,GAAGmC,EAAElC,GACtD2D,QAAS,SAACzB,GAAD,OAAO,EAAKqB,MAAMI,QAAQzB,IACnCwB,UAAWzD,KAAKuD,MAAMe,kB,uCAKjBK,GAEb,IADA,IAAIC,EAAY,GACR7E,EAAI,EAAGA,EAhCJ,EAgCoBA,IAC3B6E,EAAUlC,KAAK1C,KAAK6E,aAAa,IAAIhF,EAAQ8E,EAAU5E,KAE3D,OAAO6E,I,sCAMP,IAFA,IAAIE,EAAS,GAEL7C,EAAI,EAAGA,EAzCJ,EAyCoBA,IAC3B6C,EAAOpC,KACH,yBAAKqB,UAAU,aACV/D,KAAK+E,iBAAiB9C,KAKnC,OAAO6C,I,+BAIP,OACI,6BACM9E,KAAKgF,qB,GArDYf,IAAMC,WCN5Be,EAAiB,CAC1BC,QAAS,EACTC,KAAM,G,gBC0BOC,MAxBjB,SAAuB9B,GAEnB,SAASU,EAAY/B,GACjBqB,EAAMI,QAAQzB,GAGlB,OACI,6BACI,4BACI8B,UAAWsB,IAAOC,WAClB5B,QAAS,kBAAMM,EAAYiB,EAAeE,QAF9C,QAOA,4BACIpB,UAAWsB,IAAOC,WAClB5B,QAAS,kBAAMM,EAAYiB,EAAeC,WAF9C,cCnBSK,E,WAMjB,WAAYzE,EAAU0E,EAAO3B,GAAW,yBALxC4B,OAAS,EAK8B,KAJvC3E,SAAW,KAI4B,KAHvC0E,MAAQ,KAG+B,KAFvC3B,UAAY,IAGR7D,KAAKc,SAAWA,EAChBd,KAAKwF,MAAQA,EACbxF,KAAK6D,UAAYA,E,2DAIjB7C,QAAQC,IAAI,0B,KCXCyE,E,WAMjB,WAAYjC,EAAWkC,EAASC,GAAY,yBAL5CC,QAAU,GAKiC,KAJ3CC,aAAe,EAI4B,KAH3CH,SAAW,GAIP3F,KAAKyD,UAAYA,EACjBzD,KAAK2F,SAAWA,EAChB3F,KAAK4F,WAAaA,E,wDAIV9E,GACR,IAAIiF,EAAY,IAAIR,EAAOzE,EAAUd,KAAMA,KAAK2F,UAIhD,OAHA3F,KAAK6F,QAAQnD,KAAKqD,GAClB/E,QAAQC,IAAI,oBAAsBH,GAE3BiF,I,iCAIAnD,EAAgBC,GACvB,IAAI,IAAIZ,EAAG,EAAGA,EAAIjC,KAAK6F,QAAQ3D,OAAQD,IAAI,CACvC,IAAIrB,EAAUZ,KAAK6F,QAAQ5D,GACxBrB,EAAOE,SAASkF,OAAOpD,KACtBhC,EAAOE,SAAW+B,GAGvB7C,KAAKyD,UAAUN,QAAQP,GAAgBqD,iBACtCjG,KAAKyD,UAAUjC,OAASxB,Q,6CAMTc,GACnB,IAAIoF,EAAalG,KAAKyD,UAAUN,QAAQrC,GACpCqB,EAAYnC,KAAKyD,UAAU0C,aAAarF,GAG5CqB,GADAA,EAAYA,EAAUiE,OAAO,SAAClD,GAAU,OAAOA,EAAKmD,iBAC9BD,OAAO,SAAClD,GAAU,OAAOA,EAAKxC,UAAYwF,EAAWxF,SAAS,IAGpF,IADA,IAAI4F,EAAiB,GACbrE,EAAG,EAAGA,EAAIE,EAAUD,OAAQD,IAChCqE,EAAe5D,KAAKP,EAAUF,GAAGnB,UAErC,OAAOwF,I,iCAIA1D,EAAgBC,GACvB,IAAI0D,EAAavG,KAAKwG,uBAAuB5D,GAC7C2D,EAAWtD,QAAQ,SAAAnD,GAAC,OAAIkB,QAAQC,IAAInB,KAEpC,IADA,IAAI2G,GAAY,EACRxE,EAAI,EAAGA,EAAIsE,EAAWrE,OAAQD,IAC/BsE,EAAWtE,GAAG+D,OAAOnD,KACpB7B,QAAQC,IAAI,sBACZwF,GAAY,GAIpB,OAAOA,I,0CAIS3F,GAChB,IAAI4F,GAAa,EAMjB,OALA1G,KAAK6F,QAAQ5C,QAAQ,SAAAnD,GACdA,EAAEgB,SAASkF,OAAOlF,KACjB4F,GAAa,KAGdA,I,8BAIP1G,KAAK6F,QAAU,O,KC3EFc,E,WACjB,WAAYC,GAAM,oBACd5G,KAAKyD,UAAY,IAAItC,EAAU,GAC/BnB,KAAK6G,SAAW,IAAInB,EAAO1F,KAAKyD,UAAW,KAC3CzD,KAAK8G,SAAW,IAAIpB,EAAO1F,KAAKyD,UAAW,KAC3CzD,KAAKyD,UAAUlC,aAAevB,KAAK6G,SACnC7G,KAAK4G,KAAOA,E,wDAGJ9F,GACRd,KAAKyD,UAAUlC,aAAawF,YAAYjG,K,iCAGjC8B,EAAgBC,GACvB7C,KAAKyD,UAAUX,WAAWF,EAAgBC,GAC1C7C,KAAKyD,UAAUlC,aAAauB,WAAWF,EAAgBC,K,iCAGhDA,GACP7C,KAAKyD,UAAUd,WAAWE,K,gCAI1B7C,KAAKyD,UAAU9B,WAAY,EAC3B3B,KAAKyD,UAAU7B,qBAAsB,EACrC5B,KAAKyD,UAAU5B,mBAAoB,EACnC7B,KAAKyD,UAAU3B,cAAe,EAC9B9B,KAAKyD,UAAUL,QACfpD,KAAK6G,SAAW,IAAInB,EAAO1F,KAAKyD,UAAW,KAC3CzD,KAAK8G,SAAW,IAAIpB,EAAO1F,KAAKyD,UAAW,KAC3CzD,KAAKyD,UAAUlC,aAAevB,KAAK6G,SACnC7F,QAAQC,IAAI,yB,gCAKZjB,KAAKyD,UAAU3B,cAAe,EAC9B9B,KAAKyD,UAAU5B,mBAAoB,EACnC7B,KAAKyD,UAAU7B,qBAAsB,EAErC5B,KAAKyD,UAAUlC,aAAgBvB,KAAKyD,UAAUlC,eAAiBvB,KAAK6G,SAAY7G,KAAK8G,SAAW9G,KAAK6G,W,+CAGhFG,GACrB,IAAIC,EAAajH,KAAKyD,UAAU0C,aAAaa,GACzCE,EAAsB,GAO1B,OANAD,EAAWhE,QAAQ,SAAAC,GACXA,EAAKmD,eAAiBnD,EAAKpC,WAAakG,GACxCE,EAAoBxE,KAAKQ,KAI1BgE,I,2CAIUpG,GACjB,IAAIqG,EAAyBnH,KAAKyD,UAAUhC,eAAeX,SAE3D,OAAGd,KAAKyD,UAAUlC,aAAa6F,WAAWD,EAAwBrG,IAC9DE,QAAQC,IAAI,oBAAsBH,EAASC,YAC3Cf,KAAK8C,WAAWqE,EAAwBrG,GACrCd,KAAKyD,UAAUN,QAAQrC,GAAUJ,WAAaR,EAAMI,SACnDN,KAAKyD,UAAUjC,QAAS,GACjB,IAGXxB,KAAKyD,UAAU3B,cAAe,EAC9B9B,KAAKyD,UAAU7B,qBAAsB,GAE9B,KAGX5B,KAAKyD,UAAU1B,cAAgB,uCACxB,K,4CAGWjB,GAClB,IAAIuG,EAAcrH,KAAKyD,UAAUN,QAAQrC,GAGzC,GAA0B,OAAvBuG,EAAYzG,OAEX,OADAZ,KAAKyD,UAAU1B,cAAgB,oCACxB,EAIX,IAAIN,EAAiB4F,EAAYzG,OAEjC,OAAGZ,KAAKyD,UAAUlC,aAAa+F,oBAAoBxG,IAC/CE,QAAQC,IAAI,sCACZjB,KAAKyD,UAAUhC,eAAiBA,EAC5BzB,KAAKyD,UAAU5B,oBACf7B,KAAKyD,UAAU5B,mBAAoB,IAEhC,IAEP7B,KAAKyD,UAAU1B,cAAgB,sBAE5B,K,uCAGMjB,GACb,IAA6B,IAA1Bd,KAAKyD,UAAUjC,OAIlB,GAAGxB,KAAKyD,UAAU9B,UACd3B,KAAKyD,UAAU9B,UAAY3B,KAAKuH,YAAYzG,QAIhD,GAAGd,KAAKyD,UAAU7B,oBACd5B,KAAKyD,UAAU7B,oBAAsB5B,KAAKwH,sBAAsB1G,OADpE,CAKA,GAAGd,KAAKyD,UAAU5B,kBAAkB,CAChC,GAAI7B,KAAKyD,UAAUN,QAAQrC,GAAUuF,cAAe,CAChDrG,KAAKyD,UAAU5B,kBAAoB7B,KAAKyH,qBAAqB3G,GAE7D,IAAIoG,EAAsBlH,KAAK0H,yBAAyB5G,GAIxD,YAHAd,KAAKyD,UAAUkE,eAAeT,GAK9B,OAAIlH,KAAKwH,sBAAsB1G,QAC3Bd,KAAKyD,UAAU1B,cAAgB,2CAG/B,EAMZ,GAAI/B,KAAKyD,UAAU3B,aAAc,CAC7Bd,QAAQC,IAAI,mCAAqCH,GACjD,IAAI8G,EAAS5H,KAAKyD,UAAUN,QAAQrC,GAEpC,GAAI8G,EAAOvB,cAAe,CAMtB,IALA,IAAIc,EAAyBnH,KAAKyD,UAAUhC,eAAeX,SAEvD+G,EAAS7H,KAAKyD,UAAU0C,aAAagB,GACrCW,GAAY,EAER7F,EAAI,EAAGA,EAAI4F,EAAO3F,OAAQD,IAC9B,GAAG4F,EAAO5F,KAAK2F,EAAO,CAClB5H,KAAKyD,UAAUd,WAAW7B,GAC1BgH,GAAY,EACZ,MAIJA,GACA9H,KAAKyD,UAAUsE,wBACf/H,KAAKgI,WAELhI,KAAKyD,UAAU1B,cAAgB,qCAInC/B,KAAKyD,UAAU1B,cAAgB,qD,kCAO/BjB,GACR,IAAIuG,EAAcrH,KAAKyD,UAAUN,QAAQrC,GAGzC,OAA0B,OAAvBuG,EAAYzG,QACXZ,KAAKyD,UAAU1B,cAAgB,0CACxB,GAIR/B,KAAK6G,SAAShB,QAAQ3D,OAAS,GAC9BmF,EAAYzG,OAAUZ,KAAK6G,SAASE,YAAYjG,GACX,IAAjCd,KAAK6G,SAAShB,QAAQ3D,SACtBlC,KAAKyD,UAAUlC,aAAevB,KAAK8G,WAEhC,GAIR9G,KAAK8G,SAASjB,QAAQ3D,OAAS,GAC9BmF,EAAYvE,WAAW9C,KAAK8G,SAASC,YAAYjG,IAEb,IAAjCd,KAAK8G,SAASjB,QAAQ3D,SACrBlC,KAAKyD,UAAU7B,qBAAsB,EACrC5B,KAAKyD,UAAUlC,aAAavB,KAAK6G,UAC1B,SANf,M,KCzLaoB,E,YAGjB,WAAY3E,GAAQ,IAAD,8BACf,4CAAMA,KAHV4E,WAAa,KAEM,EADnBC,SAAW,KAGP,EAAKC,WAAa,IAAIzB,EAAJ,gBAElB,EAAKpD,MAAO,CACRe,cAAe,EAAK8D,WAAW3E,WALpB,E,8EASFxB,GACbjC,KAAKoI,WAAWC,iBAAiBpG,GACjCjC,KAAK2D,SAAS,CACVW,cAAetE,KAAKoI,WAAW3E,YAEhCzD,KAAKuD,MAAMe,cAAc9C,OACxBxB,KAAKkI,WAAa,yBAAKnE,UAAW,UAAhB,UAAiC/D,KAAKsI,qBAAtC,YAAoE,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,uBAEtFxI,KAAKkI,WAAa,KAGwB,MAA1ClI,KAAKuD,MAAMe,cAAcvC,eACzB/B,KAAKyI,SAAW,2BAAG,uBAAGC,MAAO,CAACC,MAAO,YAAY,0BAAMJ,KAAK,MAAMC,aAAW,WAA5B,iBAAjC,IAAsFxI,KAAKuD,MAAMe,cAAcvC,eAC/H/B,KAAKoI,WAAW3E,UAAU1B,cAAgB,MAE1C/B,KAAKyI,SAAW,O,2CAMpB,OAAOzI,KAAKuD,MAAMe,cAAc/C,aAAaoE,W,uCAI7C,OAAI3F,KAAKuD,MAAMe,cAAc3C,UAClB,qBACA3B,KAAKuD,MAAMe,cAAc1C,qBAAuB5B,KAAKuD,MAAMe,cAAczC,kBACzE,+BACA7B,KAAKuD,MAAMe,cAAcxC,aACzB,6BADJ,I,yCAKQG,GACXA,IAAMgD,EAAeC,QAErB0D,SAASC,SAASC,QAAO,GAGpB7G,IAAMgD,EAAeE,OAC1BnF,KAAKoI,WAAWJ,UAChBhI,KAAK+I,iB,oCAKT/I,KAAK2D,SAAS,CAACW,cAAetE,KAAKoI,WAAW3E,c,+BAGxC,IAAD,OACDuF,EAAiBhJ,KAAKsI,qBACtBW,EAAajJ,KAAKkJ,iBACtB,OACI,oCACI,kDAAuB,0BAAMX,KAAK,MAAMC,aAAW,QAA5B,iBACvB,qFACA,yBAAKzE,UAAU,QACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIU,IAAMzE,KAAKmJ,aACXzF,QAAS,SAACzB,GAAD,OAAO,EAAKoG,iBAAiBpG,IACtCwB,UAAWzD,KAAKuD,MAAMe,iBAI9B,yBAAKP,UAAU,gBACX,yBAAKA,UAAU,iBACX,kBAACqF,EAAD,CACI1F,QAAS,SAACzB,GAAD,OAAO,EAAKoH,mBAAmBpH,IACxCwB,UAAWzD,KAAKuD,MAAMe,iBAG9B,oCAAS,qCAAW0E,EAAX,YACT,2BAAG,0CAAH,IAAuBC,GACtBjJ,KAAKyI,SACLzI,KAAKkI,kB,GAxFIjE,IAAMC,W,gBCAxCoF,IAASC,OACL,yBAAKxF,UAAU,aACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,MACA,kBCRG,WACX,OACI,yBAAKA,UAAWsB,IAAOmE,MACnB,qCACA,yDAA8B,uBAAGzF,UAAWsB,IAAOoE,aAArB,gBAA9B,6BAA0G,uBAAG1F,UAAWsB,IAAOoE,aAArB,WAA1G,mCAAuL,uBAAG1F,UAAWsB,IAAOoE,aAArB,qBAAvL,qDAAgS,uBAAG1F,UAAWsB,IAAOoE,aAArB,aAEhS,2CAEA,mEAAwC,uBAAG1F,UAAWsB,IAAOoE,aAArB,gBAAxC,4BAAmH,uBAAG1F,UAAWsB,IAAOoE,aAArB,WAAnH,qCAAkM,uBAAG1F,UAAWsB,IAAOoE,aAArB,WAAlM,cAA0P,uBAAG1F,UAAWsB,IAAOqE,aAArB,QAA1P,aAA8S,uBAAG3F,UAAWsB,IAAOqE,aAArB,SAA9S,aAAmW,uBAAG3F,UAAWsB,IAAOoE,aAArB,qBAEnW,2BAAG,uBAAG1F,UAAWsB,IAAOqE,aAArB,QAAH,kBAA4D,uBAAG3F,UAAWsB,IAAOoE,aAArB,UAA5D,uDACA,gCAAK,uBAAG1F,UAAWsB,IAAOoE,aAArB,UAAL,QAAsD,uBAAG1F,UAAWsB,IAAOqE,aAArB,WAAtD,mCAAmI,uBAAG3F,UAAWsB,IAAOqE,aAArB,aAAnI,mCAAkN,uBAAG3F,UAAWsB,IAAOqE,aAArB,QAAlN,4BAAqR,uBAAG3F,UAAWsB,IAAOoE,aAArB,UAArR,yCAEA,6CAAkB,uBAAG1F,UAAWsB,IAAOoE,aAArB,UAAlB,IAA+D,uBAAG1F,UAAWsB,IAAOqE,aAArB,SAA/D,iBAAwH,uBAAG3F,UAAWsB,IAAOoE,aAArB,cAAxH,sBAA2L,uBAAG1F,UAAWsB,IAAOoE,aAArB,UAA3L,SAA6O,uBAAG1F,UAAWsB,IAAOoE,aAArB,SAA7O,MAEA,2BAAG,uBAAG1F,UAAWsB,IAAOqE,aAArB,SAAH,MAAiD,uBAAG3F,UAAWsB,IAAOoE,aAArB,SAAjD,SAAkG,uBAAG1F,UAAWsB,IAAOoE,aAArB,SAAlG,0BAAoK,uBAAG1F,UAAWsB,IAAOqE,aAArB,gBAApK,QAA2N,uBAAG3F,UAAWsB,IAAOoE,aAArB,gBAA3N,KAEA,sCAAW,uBAAG1F,UAAWsB,IAAOqE,aAArB,SAAX,WAA8D,uBAAG3F,UAAWsB,IAAOoE,aAArB,SAA9D,2BAAiI,2BAAG,oCAApI,uFAAuO,uBAAG1F,UAAWsB,IAAOoE,aAArB,YAAvO,gCAAkT,uBAAG1F,UAAWsB,IAAOoE,aAArB,oBAAlT,KAEA,gDACA,6CAAkB,uBAAG1F,UAAWsB,IAAOoE,aAArB,WAAlB,IAAgE,uBAAG1F,UAAWsB,IAAOqE,aAArB,YAAhE,cAAyH,uBAAG3F,UAAWsB,IAAOoE,aAArB,WAAzH,2CDZA,QAGRb,SAASe,eAAe,U,kBEd5BhK,EAAOC,QAAU,CAAC,WAAa,oC","file":"static/js/main.f2814af8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Menu_body__2jcq5\",\"purple_text\":\"Menu_purple_text__w3NqM\",\"orange_text\":\"Menu_orange_text__2l0Jv\"};","export default class Vector2{\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n\n    equals(vector2){\n        return (vector2.x === this.x) && (vector2.y === this.y);\n    }\n\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n}","export const FLOOR = {\n    GROUND: 0, \n    L_ONE: 1,\n    L_TWO: 2,\n    L_THREE: 3,\n    DOME: 'D',\n};","import {FLOOR} from './Floor.js';\nimport Vector2 from './Vector2.js';\n\nexport default class Tile {\n    description = 'This is a tile!';\n    topLevel = FLOOR.GROUND;\n    capped = false;\n    worker = null;\n    position;\n    isHighlighted = false;\n\n    constructor(x,y){\n        this.position = new Vector2(x,y);\n        this.description += this.position.toString();\n    }\n\n    moveWorker(worker){\n        this.worker = worker;\n        console.log('Worker is now ' + this.worker);\n    }\n\n    removeWorker(){\n        this.worker = null;\n    }\n\n    //currently also the isMoveable\n    isBuildable(){\n        return (!this.capped) && (this.worker === null);\n    }\n\n    //assumes that the build has been validated\n    buildFloor(){\n        if((this.topLevel+1)===4){\n            this.topLevel = FLOOR.DOME;\n            this.capped = true;\n        } else {\n            this.topLevel+=1;\n        }\n    }\n\n    hasWorkerWon(){\n        return this.worker === null && this.topLevel === FLOOR.L_THREE;\n    }\n\n    getIndicator(){\n        return this.worker.getIndicator();\n    }\n\n    reset(){\n        this.topLevel = FLOOR.GROUND;\n        this.capped = false;\n        this.worker = null;\n        this.isHighlighted = false;\n    }\n\n\n\n    //uncaping requires memory of previos top floor\n\n    //overide floor can accept something and set topLevel for future changes.\n\n\n}","/* eslint-disable no-unused-vars */\nimport Tile from './Tile.js';\n\nexport default class GameState{\n    boardState = null;\n    playerList = []\n    activePlayer = null;\n    boardSize = 0;\n    winner = null;\n    selectedWorker = null;\n    highlightedTiles = [];\n\n    isInSetup = true;\n    needsToSelectWorker = false;\n    workerNeedsToMove = false;\n    needsToBuild = false;\n\n    error_message = null;\n    \n    constructor(boardSize){\n        this.boardState = new Array(boardSize);\n        for (var i = 0; i < this.boardState.length; i++) {\n            this.boardState[i] = new Array(boardSize);\n        }\n        \n        for (let x = 0; x < this.boardState[0].length; x++){\n            for (let y = 0; y < this.boardState[x].length; y++){\n                this.boardState[x][y] = new Tile(x, y); // 0 means nothing has been built\n            }\n        }\n        \n        this.boardSize = boardSize;\n    }\n    \n    //Get the 3x3 grid around a target position. \n    //Returns up to 9 Tiles, depending if the position is on the edge of the board or not.\n    getLocalNine(position){\n        let localNine = [];\n        for (let dx = -1; dx <= 1; dx++){\n            for (let dy = -1; dy <= 1; dy++){\n                let tx = position.x + dx ;\n                let ty = position.y + dy;\n                if (tx >= 0 && tx < this.boardSize){\n                    if (ty >= 0 && ty < this.boardSize){\n                        if (!this.boardState[tx][ty] === undefined){\n                            console.error('Attempted to push undefined to local 9.');\n                        }\n                        else {\n                            localNine.push(this.boardState[tx][ty]);\n                        }\n                    }\n                }\n            }\n        }\n        return localNine;\n    }\n\n    getTile(vector2){\n        return this.boardState[vector2.x][vector2.y];\n    }\n\n    buildFloor(position){\n        this.boardState[position.x][position.y].buildFloor();\n    }\n    \n    //update the boardState\n    moveWorker(workerPosition, targetPosition){\n        if(this.selectedWorker === null) console.error('There is no worker selected.');\n        this.boardState[targetPosition.x][targetPosition.y].moveWorker(this.selectedWorker);\n        this.boardState[workerPosition.x][workerPosition.y].removeWorker();\n    }\n\n    playerHasWon(){\n        return this.winner === null;\n    }\n\n    highlightTiles(positions){\n        if(this.selectedWorker === null)\n            console.error('Selected worker is null');\n\n        if (positions.length !== 0) {\n            positions.forEach(tile => {\n                this.getTile(tile.position).isHighlighted = true;\n                this.highlightedTiles.push(tile);\n            });\n        }\n    }\n\n    clearHighlightedTiles(){\n        // Clear the state of each tile\n        this.highlightedTiles.forEach(tile => {\n            this.getTile(tile.position).isHighlighted = false;\n        });\n\n        // Clear highlited tiles list\n        this.highlightedTiles = [];\n    }\n\n    setTile(position, tile){\n        this.boardState[position.x][position.y] = tile;\n    }\n\n    reset(){        \n        for(let x = 0; x < this.boardState[0].length; x++){\n            for(let y = 0; y < this.boardState[x].length; y++){\n                this.boardState[x][y].reset();\n            }\n        }\n        \n        this.playerList.forEach(x => x.reset()); \n        this.winner = null;       \n    }\n\n    logGameState(){\n        console.log('Current state: ');\n        for(let x = 0; x < this.boardSize; x++){\n            for(let y = 0; y < this.boardSize; y++){\n                console.log(this.boardState[x][y].position + ' has worker: ' + this.boardState[x][y].worker);\n            }\n        }\n    }\n    \n   \n}","import React from 'react';\n// eslint-disable-next-line no-unused-vars\nimport GameState from '../Model/GameState.js';\nimport {FLOOR} from '../Model/Floor.js';\n\n\nexport default class Square extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            squareLevel: 'square0', \n            gameState: this.props.gameState,\n        });\n    }\n\n    handleClick(){\n        this.props.onClick(this.props.position); \n        let tile = this.state.gameState.boardState[this.props.position.x][this.props.position.y];\n        \n        if(tile.topLevel===FLOOR.GROUND){\n            this.setState({\n                squareLevel: 'square0', \n            });\n        } else if(tile.topLevel===FLOOR.L_ONE){\n            this.setState({\n                squareLevel: 'square1', \n            });\n        } else if(tile.topLevel===FLOOR.L_TWO){\n            this.setState({\n                squareLevel: 'square2', \n            });\n        } else if(tile.topLevel===FLOOR.L_THREE){\n            this.setState({\n                squareLevel: 'square3', \n            });\n        } else {\n            this.setState({\n                squareLevel: 'square4', \n            });\n        }\n    }\n \n    \n    render(){\n        let tile = this.state.gameState.boardState[this.props.position.x][this.props.position.y];\n        let workerIndicator = (tile.worker == null) ? '' : tile.worker.indicator;\n        if (tile.is_highlighted) {\n            this.setState({\n                squareLevel: 'highlightedsquare',\n            });\n        }\n\n        return (\n            <button \n                // eslint-disable-next-line quotes\n                className={this.state.squareLevel}\n                onClick={() => this.handleClick()}\n            >\n                <div className= \"playerRow\">\n                    {workerIndicator}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport Vector2 from '../Model/Vector2.js';\nimport Square from './Square.js';\n\nconst BOARD_SIZE = 5;\n\nexport default class Board extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.squareElement = React.createRef();\n\n        this.state=({\n            viewGameState: this.props.gameState\n        });\n    }\n\n    updateSquare(){\n        this.squareElement.current.updateSelf();\n    }\n\n    // takes a vector and assigns that vector to a square, also assigns an onclick method\n    renderSquare(i) {\n        return (\n            <Square\n                ref = {this.squareElement}\n                position = {i}\n                tileState={this.state.viewGameState.boardState[i.x][i.y]}\n                onClick={(i) => this.props.onClick(i)}\n                gameState={this.state.viewGameState}\n            />\n        );\n    }\n\n    generateBoardRow(row_index){\n        let squareJSX = [];\n        for(let y = 0; y < BOARD_SIZE; y++){\n            squareJSX.push(this.renderSquare(new Vector2(row_index,y)));\n        }\n        return squareJSX;\n    }\n\n    generateBoard(){\n        let rowSJX = [];\n  \n        for(let i = 0; i < BOARD_SIZE; i++){\n            rowSJX.push(\n                <div className='board-row'>\n                    {this.generateBoardRow(i)}\n                </div>\n            );\n        }\n\n        return rowSJX;\n    }\n\n    render() {\n        return (\n            <div>\n                { this.generateBoard() }\n            </div>\n        );\n    }\n}","export const CONTROLBUTTONS = {\n    NEWGAME: 0, \n    PASS: 1,\n};","import React from 'react';\nimport {CONTROLBUTTONS} from '../Model/ControlButtons.js'; \nimport styles from \"../styles/ControlPanel.module.css\";\n\nfunction ControlPannel(props){\n\n    function handleClick(i){\n        props.onClick(i);\n    }\n\n    return(\n        <div>\n            <button \n                className={styles.menuButton} \n                onClick={() => handleClick(CONTROLBUTTONS.PASS)}\n            > \n                Pass\n            </button>\n            \n            <button \n                className={styles.menuButton}\n                onClick={() => handleClick(CONTROLBUTTONS.NEWGAME)}\n            > \n                New Game\n            </button>\n        </div>\n    );\n    \n} export default ControlPannel;\n","export default class Worker{\n    gender = 0;\n    position = null;\n    owner = null;\n    indicator = 'W';\n\n    constructor(position, owner, indicator){\n        this.position = position;\n        this.owner = owner;\n        this.indicator = indicator;\n    }\n\n    logSomething(){\n        console.log('I LOGGED SOMETHING');\n    }\n\n\n}\n\n","import Worker from '../Model/Worker.js';\n\nexport default class Player{\n    workers = [];\n    moveDistance = 1;\n    workerID = '';\n\n\n    constructor(gameState, workerID,playerName){\n        this.gameState = gameState;\n        this.workerID = workerID;\n        this.playerName = playerName;\n    }\n\n    //creates a new worker at the target position, but does not update the gameState.\n    placeWorker(position){\n        let newWorker = new Worker(position, this, this.workerID);\n        this.workers.push(newWorker);\n        console.log('Placed worker at ' + position);\n        \n        return newWorker;\n    }\n\n    //updates the workers position, but not the gameState (UNLESS THE PLAYER WON.)\n    moveWorker(workerPosition, targetPosition){\n        for(let i =0; i < this.workers.length; i++){\n            let worker  = this.workers[i];\n            if(worker.position.equals(workerPosition)){\n                worker.position = targetPosition;\n            }\n        }\n        if(this.gameState.getTile(workerPosition).hasWorkerWon())\n            this.gameState.winner = this;\n    }\n\n   \n\n    //gets all valid moves as an array of Vector2s, of the valid moves for a given worker.\n    getAllValidWorkerMoves(position){\n        let workerTile = this.gameState.getTile(position);\n        let localNine = this.gameState.getLocalNine(position);\n        \n        localNine = localNine.filter((tile) => {return tile.isBuildable();}); //filter out all capped and worker filled tiles\n        localNine = localNine.filter((tile) => {return tile.topLevel <= workerTile.topLevel+1;}); //filter out all tiles that are too high\n        \n        let validPositions = [];\n        for(let i =0; i < localNine.length; i++){\n            validPositions.push(localNine[i].position);\n        }\n        return validPositions;\n    }\n\n    //verifies that a given position is a valid move location for a given worker\n    verifyMove(workerPosition, targetPosition){\n        let validMoves = this.getAllValidWorkerMoves(workerPosition);\n        validMoves.forEach(x => console.log(x));\n        let moveValid = false;\n        for(let i = 0; i < validMoves.length; i++){\n            if(validMoves[i].equals(targetPosition)){\n                console.log('The move is valid.');\n                moveValid = true;\n            }\n                \n        }\n        return moveValid;\n    }\n\n\n    hasWorkerAtPosition(position){\n        let foundMatch = false;\n        this.workers.forEach(x => {\n            if(x.position.equals(position)){\n                foundMatch = true;\n            }\n        });\n        return foundMatch;\n    }\n\n    reset(){\n        this.workers = [];\n    }\n}\n\n","import Player from './Player';\nimport GameState from '../Model/GameState';\nimport {FLOOR} from '../Model/Floor.js';\n\nexport default class GameController {\n    constructor(game){\n        this.gameState = new GameState(5);\n        this.player_1 = new Player(this.gameState, '1');\n        this.player_2 = new Player(this.gameState, '2');\n        this.gameState.activePlayer = this.player_1;\n        this.game = game;\n    }\n\n    placeWorker(position) {\n        this.gameState.activePlayer.placeWorker(position);\n    }\n\n    moveWorker(workerPosition, targetPosition){\n        this.gameState.moveWorker(workerPosition, targetPosition);  //update the board state\n        this.gameState.activePlayer.moveWorker(workerPosition, targetPosition); //update the worker state\n    }\n\n    buildFloor(targetPosition){\n        this.gameState.buildFloor(targetPosition); //update the board state\n    }\n\n    newGame(){\n        this.gameState.isInSetup = true;\n        this.gameState.needsToSelectWorker = false;\n        this.gameState.workerNeedsToMove = false;\n        this.gameState.needsToBuild = false;\n        this.gameState.reset();\n        this.player_1 = new Player(this.gameState, '1');\n        this.player_2 = new Player(this.gameState, '2');\n        this.gameState.activePlayer = this.player_1;\n        console.log('Created a new game.');\n    }\n\n    // Resets the game State\n    newTurn() {\n        this.gameState.needsToBuild = false;\n        this.gameState.workerNeedsToMove = false;\n        this.gameState.needsToSelectWorker = true;\n\n        this.gameState.activePlayer = (this.gameState.activePlayer === this.player_1) ? this.player_2 : this.player_1;\n    }\n\n    find_buildable_positions(worker_position) {\n        let local_nine = this.gameState.getLocalNine(worker_position);\n        let buildable_positions = [];\n        local_nine.forEach(tile => {\n            if (tile.isBuildable() && tile.position !== worker_position) {\n                buildable_positions.push(tile);\n            }\n        });\n\n        return buildable_positions;\n    }\n\n    //assumes a worker is selected \n    handleWorkerMovement(position){\n        let selectedWorkerPosition = this.gameState.selectedWorker.position;\n        \n        if(this.gameState.activePlayer.verifyMove(selectedWorkerPosition, position)){\n            console.log('Moving worker to ' + position.toString());\n            this.moveWorker(selectedWorkerPosition, position);\n            if(this.gameState.getTile(position).topLevel === FLOOR.L_THREE){\n                this.gameState.winner = true;\n                return false;\n            }\n\n            this.gameState.needsToBuild = true;\n            this.gameState.needsToSelectWorker = false;\n\n            return false;\n        }\n\n        this.gameState.error_message = \"Can't move worker to that location.\";\n        return true;\n    }\n\n    handleWorkerSelection(position){\n        let clickedTile = this.gameState.getTile(position);\n        \n        //there is no worker on the clicked tile\n        if(clickedTile.worker === null){\n            this.gameState.error_message = 'Selected a tile without a worker';\n            return true;\n        }\n\n        //they have selected a worker. But is it theirs?\n        let selectedWorker = clickedTile.worker;\n\n        if(this.gameState.activePlayer.hasWorkerAtPosition(position)){\n            console.log('The user has selected their worker');\n            this.gameState.selectedWorker = selectedWorker;\n            if(!this.gameState.workerNeedsToMove){\n                this.gameState.workerNeedsToMove = true;\n            }\n            return false;\n        } else {\n            this.gameState.error_message = 'Select your worker';\n        }\n        return true;\n    }\n\n    handleBoardClick(position) {\n        if(this.gameState.winner === true) {\n            return;\n        }\n\n        if(this.gameState.isInSetup){\n            this.gameState.isInSetup = this.handleSetup(position);\n            return;\n        }\n\n        if(this.gameState.needsToSelectWorker){\n            this.gameState.needsToSelectWorker = this.handleWorkerSelection(position);\n            return;\n        }\n\n        if(this.gameState.workerNeedsToMove){\n            if (this.gameState.getTile(position).isBuildable()) {\n                this.gameState.workerNeedsToMove = this.handleWorkerMovement(position);\n\n                let buildable_positions = this.find_buildable_positions(position);\n                this.gameState.highlightTiles(buildable_positions);\n                \n\n                return;   \n            } else {\n                if (this.handleWorkerSelection(position)) {\n                    this.gameState.error_message = 'Worker can\\'t move to that location';\n                    return;\n                } else {\n                    return;\n                }\n\n            }\n        }\n\n        if (this.gameState.needsToBuild) {\n            console.log('Attempting to build at position ' + position);\n            let target = this.gameState.getTile(position);\n\n            if (target.isBuildable()) {\n                let selectedWorkerPosition = this.gameState.selectedWorker.position;\n\n                let local9 = this.gameState.getLocalNine(selectedWorkerPosition);\n                let builtBool = false;\n\n                for(let i = 0; i < local9.length; i++){\n                    if(local9[i]===target){\n                        this.gameState.buildFloor(position);\n                        builtBool = true;\n                        break;\n                    }\n                }\n                \n                if (builtBool) {\n                    this.gameState.clearHighlightedTiles();\n                    this.newTurn();\n                } else {\n                    this.gameState.error_message = \"Build Position is unreachable\";\n                }\n\n            } else {\n                this.gameState.error_message = \"Can't build on tiles that are already occupied\";\n            }\n        }\n       \n    }\n\n\n    handleSetup(position){\n        let clickedTile = this.gameState.getTile(position);\n\n        //Can't place a worker on top of another.\n        if(clickedTile.worker !== null){\n            this.gameState.error_message = \"Cannot place worker, tile is occupied.\"\n            return true;\n        }\n         \n        //player 1 places their worker.\n        if(this.player_1.workers.length < 2){\n            clickedTile.worker = (this.player_1.placeWorker(position));\n            if (this.player_1.workers.length === 2) {\n                this.gameState.activePlayer = this.player_2;\n            }\n            return true;\n        }\n\n        //player 2 places their worker\n        if(this.player_2.workers.length < 2){\n            clickedTile.moveWorker(this.player_2.placeWorker(position));\n\n            if(this.player_2.workers.length === 2){\n                this.gameState.needsToSelectWorker = true;\n                this.gameState.activePlayer=this.player_1;\n                return false;\n            }\n                \n            return true;\n        }\n    }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport Board from './Board.js';\nimport ControlPanel from './ControlPanel.js';\nimport {CONTROLBUTTONS} from '../Model/ControlButtons.js'; \nimport GameController from '../Controllers/GameController';\n\n\nexport default class Game extends React.Component {\n    winningJSX = null;\n    errorJSX = null;\n    constructor(props) {\n        super(props);\n        this.controller = new GameController(this);\n\n        this.state=({\n            viewGameState: this.controller.gameState\n        });\n    }\n\n    handleBoardClick(i){\n        this.controller.handleBoardClick(i);\n        this.setState({\n            viewGameState: this.controller.gameState\n        });\n        if(this.state.viewGameState.winner){\n            this.winningJSX = <div className= \"winner\">Player {this.get_current_player()} wins!!! <span role='img' aria-label='medal'>🎖️</span></div>;\n        } else {\n            this.winningJSX = null;\n        }\n\n        if (this.state.viewGameState.error_message != null) {\n            this.errorJSK = <p><b style={{color: '#b33939'}}><span role='img' aria-label='warning'>⚠️</span></b> {this.state.viewGameState.error_message}</p>;\n            this.controller.gameState.error_message = null;\n        } else {\n            this.errorJSK = null;\n        }\n\n    }\n\n    get_current_player() {\n        return this.state.viewGameState.activePlayer.workerID;\n    }\n\n    get_turn_phase() {\n        if (this.state.viewGameState.isInSetup) {\n            return 'Setup ⚙️';\n        } else if (this.state.viewGameState.needsToSelectWorker || this.state.viewGameState.workerNeedsToMove) {\n            return 'Worker Movement 🧳';\n        } else if (this.state.viewGameState.needsToBuild) {\n            return 'Building 🔨';\n        }\n    }\n\n    handleControlClick(i){\n        if (i === CONTROLBUTTONS.NEWGAME){\n            //we're just refreshing the page for new game atm\n            document.location.reload(true);\n        }\n        \n        else if (i === CONTROLBUTTONS.PASS) {\n            this.controller.newTurn();\n            this.updateState();\n        }\n    }\n\n    updateState(){\n        this.setState({viewGameState: this.controller.gameState});\n    }\n\n    render() {    \n        let current_player = this.get_current_player();\n        let turn_phase = this.get_turn_phase();\n        return (\n            <>\n                <h1>Santorini in React <span role=\"img\" aria-label=\"wave\">🌊</span></h1>\n                <h4>Created by Erik Biederstadt, Richard Pham, and David </h4>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board \n                            ref ={this.boardElement} \n                            onClick={(i) => this.handleBoardClick(i)}\n                            gameState={this.state.viewGameState}\n                        />\n                    </div>\n\n                    <div className=\"winner-panel\">\n                        <div className=\"control-panel\">\n                            <ControlPanel                    \n                                onClick={(i) => this.handleControlClick(i)}\n                                gameState={this.state.viewGameState}\n                            />\n                        </div>\n                        <p>It is <b>Player {current_player}'s turn</b></p>\n                        <p><b>Turn Phase:</b> {turn_phase}</p>\n                        {this.errorJSK}\n                        {this.winningJSX}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}","/* eslint-disable no-unused-vars */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './View/Game.js';\nimport Menu from './View/Menu';\n\nReactDOM.render(\n    <div className=\"container\">\n        <div className=\"inner_content\">\n            <Game />\n            <Menu />\n        </div>\n    </div>,\n    document.getElementById('root')\n);","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport styles from '../styles/Menu.module.css';\n\nexport default function Menu() {\n    return (\n        <div className={styles.body}>\n            <h2>Setup</h2>\n            <p>The youngest player is the <b className={styles.orange_text}>Start Player</b>, who begins by placing 2 <b className={styles.orange_text}>Workers</b> of their chosen color into any <b className={styles.orange_text}>Unoccupied Spaces</b> on the board. The other players then place their <b className={styles.orange_text}>Workers.</b></p>\n            \n            <h2>How to Play</h2>\n\n            <p>Player take turns, starting with the <b className={styles.orange_text}>Start Player</b>, who first placed their <b className={styles.orange_text}>Workers</b>. On your turn, select one of you <b className={styles.orange_text}>Workers</b>. You must <b className={styles.purple_text}>move</b> and then <b className={styles.purple_text}>build</b> with the <b className={styles.orange_text}>selected Worker.</b></p>\n\n            <p><b className={styles.purple_text}>Move</b> your selected <b className={styles.orange_text}>Worker</b> into one of the (up to eight neighbouring spaces).</p>\n            <p>A <b className={styles.orange_text}>Worker</b> may <b className={styles.purple_text}>move up</b> a maximum of one Level higher, <b className={styles.purple_text}>move down</b> any number of Levels lower, or <b className={styles.purple_text}>move</b> along the same Level. A <b className={styles.orange_text}>Worker</b> may not move up more than one Level.</p>\n\n            <p>The space your <b className={styles.orange_text}>Worker</b> <b className={styles.purple_text}>moves</b> into must be <b className={styles.orange_text}>unoccopied</b> (not containing a <b className={styles.orange_text}>Worker</b> or a <b className={styles.orange_text}>Tower</b>).</p>\n\n            <p><b className={styles.purple_text}>Build</b> a <b className={styles.orange_text}>Block</b> or a <b className={styles.orange_text}>Tower</b> on a unoccupied space <b className={styles.purple_text}>neighbouring</b> the <b className={styles.orange_text}>Moved Worker</b>.</p>\n\n            <p>You can <b className={styles.purple_text}>build</b> onto a <b className={styles.orange_text}>Level</b> of any height, but you <b><u>must</u></b> choose the correct shape of Block or Tower for the Level being built. A Tower with <b className={styles.orange_text}>3 Blocks</b> and a Tower is considered a <b className={styles.orange_text}>\"Complete Tower\"</b>.</p>\n\n            <h2>Winning the Game</h2>\n            <p>If one of your <b className={styles.orange_text}>Workers</b> <b className={styles.purple_text}>moves up</b> on top of <b className={styles.orange_text}>Level 3</b> durning your turn, you insantly win!</p>\n        </div>\n    );\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuButton\":\"ControlPanel_menuButton__1Z5RU\"};"],"sourceRoot":""}